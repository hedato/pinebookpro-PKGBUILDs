
import { Vector } from "..";
export declare class Matrix {
    data: number[][];
    constructor(data: number[][]);
    constructor(rows: number, columns: number);
    private static get2DArray(m, n, fill?);
    static rowVector(...components: number[]): Matrix;
    static columnVector(...components: number[]): Matrix;
    static rand(rows: number, columns: number): Matrix;
    static ones(rows: number, columns: number): Matrix;
    static eye(size: number): Matrix;
    apply(func: (number) => number): void;
    static join(m1: Matrix, m2: Matrix, pos?: 'top' | 'bottom' | 'left' | 'right'): Matrix;
    size(): number[];
    getNumberOfRows(): number;
    getNumberOfColumns(): number;
    getDimensions(): number[];
    set(row: number, column: number, val: number): void;
    get(row: number, column: number): number;
    getRowAsRowVector(row: number): Matrix;
    getColumnAsRowVector(column: number): Matrix;
    getAsScalar(): number;
    getArray(): number[][];
    copy(): Matrix;
    slice(startRow: number, endRow: number, startColumn: number, endColumn: number): Matrix;
    map(func: (val: number, row?: number, column?: number) => number): this;
    forEach(func: (val: number, row?: number, column?: number) => void): this;
    fill(newVal: number): this;
    scale(scl: number): this;
    add(tensor: Matrix): this;
    subtract(tensor: Matrix | Vector): this;
    multiply(tensor: Matrix | Vector): this;
    divide(tensor: Matrix | Vector): this;
    dot(tensor: Matrix | Vector): this;
    private transformVectorToMatrix(tentativeVec);
    getVector(): void;
    transpose(): this;
    min(): Matrix;
    max(): Matrix;
    private hasSameDimensions(m);
    private error(code, operation);
    show(): this;
    getAsString(markup?: boolean, joinChar?: string, lineSpaceChar?: string, end?: string, fixed?: number): string;
}