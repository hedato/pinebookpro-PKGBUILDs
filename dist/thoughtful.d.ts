// Generated by dts-bundle v0.7.2

export class Matrix {
    data: number[][];
    constructor(data: number[][]);
    constructor(rows: number, columns: number);
    static rowVector(...components: number[]): Matrix;
    static columnVector(...components: number[]): Matrix;
    static rand(rows: number, columns: number): Matrix;
    static ones(rows: number, columns: number): Matrix;
    static eye(size: number): Matrix;
    apply(func: (number) => number): void;
    static join(m1: Matrix, m2: Matrix, pos?: 'top' | 'bottom' | 'left' | 'right'): Matrix;
    size(): number[];
    getNumberOfRows(): number;
    getNumberOfColumns(): number;
    getDimensions(): number[];
    set(row: number, column: number, val: number): void;
    get(row: number, column: number): number;
    getRowAsRowVector(row: number): Matrix;
    getColumnAsRowVector(column: number): Matrix;
    getAsScalar(): number;
    getArray(): number[][];
    copy(): Matrix;
    slice(startRow: number, endRow: number, startColumn: number, 